---
# So these tasks are definitely not ideal. The problem is that I  want to ensure that we
# don´t have duplicates so I flush every rule and then add the ones I want. The problem of doing
# that is that if other tasks add rules to the DOCKER-USER chain, they will be deleted, so they´d
# need to always be re-ran whenever theses tasks are ran.
# You might be wondering why I don´t just use the iptables module. The problem is that I couldn´t
# find a way to use match conntrack and ctorigdstport and other options that are not supported by

# Ideally I want to re-do this to use the modules, but I need to have time to setup tests and make sure that
# firewall is actually working
- name: Install iptables-persistent   
  become: true
  apt:
    update_cache: true
    name: iptables-persistent
    state: latest

- name: Flush all previous rules
  ansible.builtin.shell: iptables -F DOCKER-USER
  become: true


- name: Allow established and related connections
  ansible.builtin.shell: iptables -A DOCKER-USER -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
  become: true

- name: Allow traefik to be accessible HTTP
  ansible.builtin.shell: iptables --insert DOCKER-USER --in-interface eth0 -d 172.20.0.10 --protocol tcp --match conntrack --ctorigdstport 80 --ctdir ORIGINAL --jump ACCEPT
  become: true

- name: Allow traefik to be accessible HTTPS
  ansible.builtin.shell: iptables --insert DOCKER-USER --in-interface eth0 -d 172.20.0.10 --protocol tcp --match conntrack --ctorigdstport 443 --ctdir ORIGINAL --jump ACCEPT
  become: true

- name: Block all other connections to containers
  ansible.builtin.shell: iptables -A DOCKER-USER --in-interface eth0 --jump DROP
  become: true

# This will apply to all loaded/active IPv4 tables.
- name: Save current state of the firewall in system file
  community.general.iptables_state:
    state: saved
    path: /etc/sysconfig/iptables